#   –ò–ú–ü–û–†–¢–´
#-------------------------------------------------------------#
import datetime
import config

from modules.Filters import Filter
from aiogram.types import Message
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from message import (no_start_text, yes_start_text,
                      commands_text, reply_message,rank_text, rate_text)
from Keyboards.inline import start_kb
from database.requests import (insert_user, get_user,update_fuck,
                                select_user,  update_lives,
                                  update_rank_user, score_rang, edit_nic,
                                  update_vip_coin, update_lives_ob, update_fuck_ob, get_set)
from datetime import datetime
from modules.check_group import is_reply_from_bot
from modules.profile import profile_user
#-------------------------------------------------------------#
#-------------------------------------------------------------#


#   –°–û–ó–î–ê–ù–ò–ï –†–û–£–¢–ï–†–ê  
#-------------------------------------------------------------#
router = Router()
#-------------------------------------------------------------#
#-------------------------------------------------------------#


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –°–¢–ê–†–¢
#-------------------------------------------------------------#
@router.message(CommandStart(), Filter(chat=["group", "private"]))
async def start(message: Message, bot: Bot):
    user_id = message.from_user.id
    user_data = {
        'nick': message.from_user.first_name,
        'vip_balance': 50,
        'registration_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    try:
        if not await get_user(user_id):
            await insert_user(user_id, user_data)
            await message.reply(no_start_text(), reply_markup=start_kb())
        else:
            await message.reply(yes_start_text(), reply_markup=start_kb())
        return

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
#-------------------------------------------------------------#
#-------------------------------------------------------------#


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ü–ò–°–ö–ê –£–î–ê–†–ê
#-------------------------------------------------------------#
@router.message(F.text.in_(['—É–µ–±–∞—Ç—å', '–£–µ–±–∞—Ç—å', '–ï–±–Ω—É—Ç—å', '–µ–±–∞–Ω—É—Ç—å', '–ï–±–∞–Ω—É—Ç—å', '–µ–±–Ω—É—Ç—å', 'fuck', '–µ', '–ï']),
                Filter(chat=["group"]))
async def fuck(message: Message, bot: Bot):
    user_id = message.from_user.id
    reply = message.reply_to_message
    if not reply:
        return await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±–∏—Ç—á–∏–∫–∞!')

    opponent_name = reply.from_user.first_name
    opponent_id = reply.from_user.id
    opponent_username = reply.from_user.username
    selected_user = await select_user(user_id)
    opponent = await select_user(opponent_id)

    if await is_reply_from_bot(message):
        return await message.reply('–Ø –≤—ã—à–µ –≤—Å–µ—Ö –≤–∞—Å, –±–∞–ª–±–µ—Å—ã. –Ø –≤–Ω–µ –∏–≥—Ä—ã) üòé')
    elif opponent_id == user_id:
        return await message.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–µ–±–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è. –ù–µ –ø—ã—Ç–∞–π—Å—è –Ω–∞–µ–±–∞—Ç—å –º–µ–Ω—è! üò°')
    elif opponent is None:
        return await message.reply('–£–µ–±–æ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ, –ø–æ–∑–æ–≤–∏ –µ–≥–æ –∏ —É–µ–±–∏ —á–º–æ–Ω—é! üò°')
    elif selected_user.fuck <= 0:
        return await message.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–¥–∞—Ä–æ–≤, –æ—Ç–∫–∏—Å–∞–π üò¢')
    elif opponent.lives <= 0:
        return await message.reply('–£ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–∏–∑–Ω–µ–π, —É–≤—ã..üò¢')
    elif selected_user.lives <= 0:
        return await message.reply('üò¢–î–ª—è –∏–≥—Ä—ã –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –±–æ–ª—å—à–µ 1 –∂–∏–∑–Ω–∏!\n–ü–æ–ª—É—á–∏—Ç—å –∂–∏–∑–Ω–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É —Å–µ–±—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n–ö–æ–º–∞–Ω–¥–∞ "–ø—Ä–æ—Ñ–∏–ª—å","–ø"')
    
    await update_fuck(user_id, 1)
    selected_user = await select_user(user_id)
    await update_lives(opponent_id, 1)
    opponent = await select_user(opponent_id)

     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É–¥–∞—Ä–∞
    result = await update_rank_user(user_id)
    if result[0] == True:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await message.reply(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞: {result[1]}! üéâ\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å {result[2]} —É–¥–∞—Ä–æ–≤ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞.", parse_mode='html')
        
        await message.reply(reply_message(opponent_name, opponent_username, selected_user, opponent, result[2]), parse_mode='html')
    else:
        await message.reply(reply_message(opponent_name, opponent_username, selected_user, opponent, result[2]), parse_mode='html')
#-------------------------------------------------------------#
#-------------------------------------------------------------#


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –ü–û–ú–û–©–¨
#-------------------------------------------------------------#
@router.message(Command("help"), Filter(chat=["group", "private"]))
async def help(message: Message) -> str:
    await message.reply(commands_text(), parse_mode='html')
#-------------------------------------------------------------#
#-------------------------------------------------------------#


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –†–ê–ù–ö
#-------------------------------------------------------------#
@router.message(Command('rank'), Filter(chat=["group", "private"]))
async def rank(message: Message) -> str:
    user_id = message.from_user.id
    user = await select_user(user_id)
    await message.reply(rank_text(user.rank), parse_mode='html')


@router.message(Command('rate'), Filter(chat=["group", "private"]))
async def rank(message: Message) -> str:
    user_id = message.from_user.id
    set = await get_set()
    
    await message.reply(rate_text(set.rate_life, set.rate_fuck), parse_mode='html')
#-------------------------------------------------------------#
#-------------------------------------------------------------#


#   –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –ü–†–û–§–ò–õ–¨ –î–õ–Ø –ì–†–£–ü–ü
#-------------------------------------------------------------#
@router.message(F.text.in_(['–ø', '–ø—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ–∏–ª—å', '–ü']), Filter(chat=["group"]))
async def profile(message: Message, bot: Bot) -> str:
    user_id = message.from_user.id
    next_rank = await score_rang(user_id)
    profile = await profile_user(user_id, bot, message, int(next_rank))
    
    return profile
#-------------------------------------------------------------#
#-------------------------------------------------------------#




@router.message(F.text.startswith('+–Ω–∏–∫'))
async def edit_nickname(message: Message, bot: Bot):
    edit_nick = message.text
    new_nick = edit_nick[5:100]
    try:

        if len(new_nick) > 40:
            await message.reply(f'‚ùå–ë–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∏–∫–µ - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(new_nick)}')

        else:
            user_id = message.from_user.id
            await message.reply(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫! {new_nick}')
            await edit_nic(user_id, new_nick)
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")


@router.message(F.text.startswith('+–æ–±–º–µ–Ω —É'))
async def obmen_coin(message: Message, bot: Bot):
    user_id = message.from_user.id
    text = message.text[9:100].strip() 

    if not text:
        return await message.reply('‚ùå–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ vip_coin –¥–ª—è –æ–±–º–µ–Ω–∞.')

    try:
        amount_to_exchange = int(text)
    except ValueError:
        return await message.reply('‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ vip_coin —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.')

    user = await select_user(user_id)

    if user.vip_balance < amount_to_exchange:
        return await message.reply('‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ vip_coin –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ —É–¥–∞—Ä—ã.')
    
    rate = await get_set()

    hits_granted = amount_to_exchange * rate.rate_fuck

    await update_fuck_ob(user_id, hits_granted)
    await update_vip_coin(user_id, amount_to_exchange)

    user = await select_user(user_id)

    await message.reply(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {amount_to_exchange} vip_coin –Ω–∞ {int(hits_granted)} —É–¥–∞—Ä(–æ–≤).\n'
                        f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user.fuck} —É–¥–∞—Ä(–æ–≤) –∏ {user.vip_balance} vip_coin.')
    


@router.message(F.text.startswith('+–æ–±–º–µ–Ω –∂'))
async def obmen_coin(message: Message, bot: Bot):
    user_id = message.from_user.id
    text = message.text[9:100].strip() 

    if not text:
        return await message.reply('‚ùå–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ vip_coin –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ –∂–∏–∑–Ω–∏.')

    try:
        amount_to_exchange = int(text)
    except ValueError:
        return await message.reply('‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ vip_coin —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.')

    user = await select_user(user_id)

    if user.vip_balance < amount_to_exchange:
        return await message.reply('‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ vip_coin –¥–ª—è –æ–±–º–µ–Ω–∞.')
    
    rate = await get_set()

    life_granted = amount_to_exchange * rate.rate_life

    await update_lives_ob(user_id, life_granted)
    await update_vip_coin(user_id, amount_to_exchange)

    user = await select_user(user_id)

    await message.reply(f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–ª–∏ {amount_to_exchange} vip_coin –Ω–∞ {int(life_granted)} –∂–∏–∑–Ω—å(–µ–π).\n'
                        f'–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user.lives} –∂–∏–∑–Ω—å(–µ–π) –∏ {user.vip_balance} vip_coin.')

    
    




